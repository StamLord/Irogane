[gd_scene load_steps=9 format=3 uid="uid://cu3vrb82xhyws"]

[ext_resource type="Script" path="res://scripts/interactive/Interactive.gd" id="1_cd1ev"]
[ext_resource type="Texture2D" uid="uid://fdjjcjkxdo7o" path="res://icon.svg" id="2_fpr7b"]

[sub_resource type="SphereShape3D" id="SphereShape3D_hbgxb"]

[sub_resource type="BoxShape3D" id="BoxShape3D_76ii7"]
size = Vector3(0.5, 0.5, 0.5)

[sub_resource type="Shader" id="Shader_mol42"]
code = "//Copyright 2021 redvillusion
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files 
//(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, 
//merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished
//to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
//OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
//LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR 
//IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
shader_type spatial;
 
render_mode unshaded, cull_front;
 
uniform float on : hint_range(0.0,1.0);
uniform float border_width : hint_range(0,1,0.001);
uniform vec4 color : source_color = vec4(1.0);
 
uniform bool pattern;
uniform float line_number : hint_range(0,100,1);
uniform float line_sharpness : hint_range(0,10,0.001);
 
uniform bool pulse;
uniform float pulse_speed : hint_range(0,100,1);
 
uniform bool line_movement;
uniform float line_movement_speed : hint_range(-100,100,1);
 
uniform bool wave;
 
void vertex() {
	VERTEX += VERTEX * border_width * on;
}
 
void fragment() {
	ALBEDO = color.xyz;
	if (pattern) 
	{
		vec2 uv = VERTEX.xy * line_number;
		ALBEDO = sin(uv.xxx + uv.yyy) * line_sharpness * color.xyz;
 
		if (pulse)
		{
			ALBEDO = sin(uv.xxx + uv.yyy) * line_sharpness * color.xyz * sin(TIME * pulse_speed);
		}
 
		if (line_movement)
		{
			ALBEDO = sin(uv.xxx + uv.yyy + TIME * line_movement_speed) * line_sharpness * color.xyz;
		}
 
		if (pulse && line_movement)
		{
			ALBEDO = sin(uv.xxx + uv.yyy + TIME * line_movement_speed) * line_sharpness * color.xyz * sin(TIME * pulse_speed);
		}
	}
 
	if (wave)
	{
		vec2 uv = VERTEX.xy * line_number;
		ALBEDO = sin(uv.xxx + TIME * line_movement_speed) * line_sharpness * color.xyz;
	}
 
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3j7et"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_mol42")
shader_parameter/on = 0.0
shader_parameter/border_width = 0.1
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/pattern = false
shader_parameter/line_number = 0.0
shader_parameter/line_sharpness = 0.0
shader_parameter/pulse = false
shader_parameter/pulse_speed = 0.0
shader_parameter/line_movement = false
shader_parameter/line_movement_speed = 0.0
shader_parameter/wave = false

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_uxr8i"]
resource_local_to_scene = true
next_pass = SubResource("ShaderMaterial_3j7et")
albedo_color = Color(0.337255, 0.337255, 0.337255, 1)
albedo_texture = ExtResource("2_fpr7b")
uv1_scale = Vector3(3, 2, 3)

[sub_resource type="BoxMesh" id="BoxMesh_8tndr"]
size = Vector3(0.5, 0.5, 0.5)

[node name="interactive" type="RigidBody3D"]

[node name="interactive_area" type="Area3D" parent="."]
collision_layer = 4
collision_mask = 0
script = ExtResource("1_cd1ev")

[node name="CollisionShape3D" type="CollisionShape3D" parent="interactive_area"]
shape = SubResource("SphereShape3D_hbgxb")

[node name="collider" type="CollisionShape3D" parent="."]
shape = SubResource("BoxShape3D_76ii7")

[node name="mesh" type="MeshInstance3D" parent="."]
material_override = SubResource("StandardMaterial3D_uxr8i")
mesh = SubResource("BoxMesh_8tndr")
